name: Continuous Deployment

on:
  push:
    branches: [main]

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  CLUSTER_NAME: 'week08aksbinarap'
  RESOURCE_GROUP: 'week08-rg'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to ACR
      run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

    - name: Build and push backend images
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:latest ./backend/product_service/
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:latest ./backend/order_service/
        docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:latest
        docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:latest

    - name: Build and push frontend image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
        docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

    - name: Logout from Azure
      run: az logout
      if: always()

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --overwrite-existing

    - name: Deploy database services
      run: |
        kubectl apply -f k8s/configmaps.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/product-db.yaml
        kubectl apply -f k8s/order-db.yaml

    - name: Deploy backend services
      run: |
        kubectl apply -f k8s/product-service.yaml
        kubectl apply -f k8s/order-service.yaml
        kubectl rollout status deployment/product-service --timeout=300s
        kubectl rollout status deployment/order-service --timeout=300s

    - name: Get backend service IPs
      id: get-ips
      run: |
        echo "Waiting for LoadBalancer IPs..."
        sleep 30
        PRODUCT_IP=$(kubectl get service product-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        ORDER_IP=$(kubectl get service order-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "product_ip=$PRODUCT_IP" >> $GITHUB_OUTPUT
        echo "order_ip=$ORDER_IP" >> $GITHUB_OUTPUT

    - name: Update frontend configuration
      run: |
        echo "Updating frontend with backend IPs..."
        sed -i "s|_PRODUCT_API_URL_|http://${{ steps.get-ips.outputs.product_ip }}:8000|g" frontend/main.js
        sed -i "s|_ORDER_API_URL_|http://${{ steps.get-ips.outputs.order_ip }}:8001|g" frontend/main.js

    - name: Rebuild and deploy frontend
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
        docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
        kubectl apply -f k8s/frontend.yaml
        kubectl rollout status deployment/frontend --timeout=300s

    - name: Logout from Azure
      run: az logout
      if: always()